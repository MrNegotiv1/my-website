// ==UserScript==
// @name         am am am
// @namespace    none
// @version      24141424
// @description  none
// @author       none
// @grant        none
// ==/UserScript==
(function() {
    'use strict';

    const encryptedCode = "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBhbSBhbSBhbQovLyBAbmFtZXNwYWNlICAgIG5vbmUKLy8gQHZlcnNpb24gICAgICAyNDE0MTQyNAovLyBAZGVzY3JpcHRpb24gIG5vbmUKLy8gQGF1dGhvciAgICAgICBub25lCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbiAoKSB7CiAgJ3VzZSBzdHJpY3QnOwoKCiAgd2luZG93LmF1dG9SZXNldEtleSA9ICJyIjsKICB3aW5kb3cuZVBlclNlY29uZCA9IDI1MDAwMDsKICB3aW5kb3cuYXV0b2VrZXkgPSAnICc7CgogIGZ1bmN0aW9uIGdldChsZW5ndGgpIHsKICAgIGNvbnN0IGNoYXJhY3RlcnMgPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkiOwogICAgbGV0IHJlc3VsdCA9ICcnOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICByZXN1bHQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVycy5sZW5ndGgpKTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQoKCgogIGZ1bmN0aW9uIHNob3dSZXNldE1lc3NhZ2UoKSB7CiAgICBjb25zdCBtZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICBtZXNzYWdlLmlubmVyVGV4dCA9ICJSZXNldCI7CiAgICBPYmplY3QuYXNzaWduKG1lc3NhZ2Uuc3R5bGUsIHsKICAgICAgcG9zaXRpb246ICJmaXhlZCIsCiAgICAgIHRvcDogIjUwJSIsCiAgICAgIGxlZnQ6ICI1MCUiLAogICAgICB0cmFuc2Zvcm06ICJ0cmFuc2xhdGUoLTUwJSwgLTUwJSkiLAogICAgICBmb250U2l6ZTogIjE2cHgiLAogICAgICBmb250V2VpZ2h0OiAiYm9sZCIsCiAgICAgIGNvbG9yOiAiYmxhY2siLAogICAgICB6SW5kZXg6ICI5OTk5IiwKICAgICAgdGV4dFNoYWRvdzogIjAgMCA1cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpIiwKICAgIH0pOwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtZXNzYWdlKTsKICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICBtZXNzYWdlLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICB9LCAyMDAwKTsKICB9CgogIGZ1bmN0aW9uIHRyYWNrQ291bnQoKSB7CiAgICBsZXQgY291bnQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiY3R0Iik7CiAgICByZXR1cm4gY291bnQgPT09IG51bGwgPyAwIDogcGFyc2VJbnQoY291bnQsIDEwKTsKICB9CgogIGZ1bmN0aW9uIHVwZGF0ZUNvdW50ZXIoKSB7CiAgICByZXR1cm47CiAgfQoKICB1cGRhdGVDb3VudGVyKCk7CiAgd2luZG93LkZ1bmN0aW9uID0gbmV3IFByb3h5KHdpbmRvdy5GdW5jdGlvbiwgewogICAgY29uc3RydWN0OiBmdW5jdGlvbiAodGFyZ2V0LCBhcmdzKSB7CiAgICAgIHJldHVybiBuZXcgdGFyZ2V0KGFyZ3NbMF0pOwogICAgfQogIH0pOwoKCiAgY29uc3QgdG9nZ2xlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogIHRvZ2dsZUVsZW1lbnQuaW5uZXJIVE1MID0gIkF1dG8gRSB3ZWVzdCI7CiAgT2JqZWN0LmFzc2lnbih0b2dnbGVFbGVtZW50LnN0eWxlLCB7CiAgICBjb2xvcjogImJsYWNrIiwKICAgIHBvc2l0aW9uOiAiZml4ZWQiLAogICAgYmFja2dyb3VuZENvbG9yOiAidHJhbnNwYXJlbnQiLAogICAgdXNlclNlbGVjdDogIm5vbmUiLAogICAgdG9wOiAiMTAlIiwKICAgIGxlZnQ6ICI1MCUiLAogICAgdHJhbnNmb3JtOiAidHJhbnNsYXRlWCgtNTAlKSIsCiAgICB2aXNpYmlsaXR5OiAiaGlkZGVuIiwKICAgIGZvbnRTaXplOiAiMzJweCIsCiAgICBmb250V2VpZ2h0OiAiYm9sZCIsCiAgICB0ZXh0U2hhZG93OiAiMCAwIDEwcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpIiwKICAgIGFuaW1hdGlvbjogImNvbG9yUHVsc2UgM3MgaW5maW5pdGUgYWx0ZXJuYXRlIiwKICB9KTsKICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRvZ2dsZUVsZW1lbnQpOwogIGxldCBpc0FjdGl2ZSA9IGZhbHNlOwoKCiAgY29uc3Qgc3R5bGVTaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7CiAgc3R5bGVTaGVldC5pbm5lclRleHQgPSBgCiAgICBAa2V5ZnJhbWVzIGNvbG9yUHVsc2UgewogICAgICAwJSB7CiAgICAgICAgY29sb3I6ICNmZjAwMDA7IC8qINCd0LDRh9Cw0LvRjNC90YvQuSDRhtCy0LXRgiAo0LrRgNCw0YHQvdGL0LkpICovCiAgICAgIH0KICAgICAgNTAlIHsKICAgICAgICBjb2xvcjogIzAwZmYwMDsgLyog0J/RgNC+0LzQtdC20YPRgtC+0YfQvdGL0Lkg0YbQstC10YIgKNC30LXQu9GR0L3Ri9C5KSAqLwogICAgICB9CiAgICAgIDEwMCUgewogICAgICAgIGNvbG9yOiAjMDAwMGZmOyAvKiDQmtC+0L3QtdGH0L3Ri9C5INGG0LLQtdGCICjRgdC40L3QuNC5KSAqLwogICAgICB9CiAgICB9CiAgYDsKICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlU2hlZXQpOwoKICBmdW5jdGlvbiBkZWxheShtcykgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpOwogIH0KICBhc3luYyBmdW5jdGlvbiB0b2dnbGVBdXRvQWN0aW9uKCkgewogICAgaXNBY3RpdmUgPSAhaXNBY3RpdmU7CiAgICB0b2dnbGVFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBpc0FjdGl2ZSA/ICJ2aXNpYmxlIiA6ICJoaWRkZW4iOwoKICAgIHdoaWxlIChpc0FjdGl2ZSkgewogICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgS2V5Ym9hcmRFdmVudCgia2V5ZG93biIsIHsga2V5OiAnZScsIGNvZGU6ICJLZXlFIiB9KSk7CiAgICAgIGF3YWl0IGRlbGF5KDEpOwogICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgS2V5Ym9hcmRFdmVudCgia2V5dXAiLCB7IGtleTogJ2UnLCBjb2RlOiAiS2V5RSIgfSkpOwogICAgfQogIH0KCiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsIGZ1bmN0aW9uIChldmVudCkgewogICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDEyMCkgewogICAgICB0b2dnbGVBdXRvQWN0aW9uKCk7CiAgICB9CiAgfSk7CiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiW2RhdGEtdGltZV0sIFtkYXRhLWRlbGF5XSwgW2RhdGEtYW5pbWF0aW9uLWRlbGF5XSwgW2RhdGEtdHJhbnNpdGlvbi1kZWxheV0iKS5mb3JFYWNoKGVsZW1lbnQgPT4gewogICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoImRhdGEtdGltZSIpOwogICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoImRhdGEtZGVsYXkiKTsKICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCJkYXRhLWFuaW1hdGlvbi1kZWxheSIpOwogICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoImRhdGEtdHJhbnNpdGlvbi1kZWxheSIpOwogIH0pOwogIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltzdHlsZSo9J3RyYW5zaXRpb24nXSwgW3N0eWxlKj0nYW5pbWF0aW9uJ10iKS5mb3JFYWNoKGVsZW1lbnQgPT4gewogICAgZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gIm5vbmUiOwogICAgZWxlbWVudC5zdHlsZS5hbmltYXRpb24gPSAibm9uZSI7CiAgfSk7CiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgic2NyaXB0IikuZm9yRWFjaChzY3JpcHQgPT4gewogICAgc2NyaXB0LnRleHRDb250ZW50ID0gc2NyaXB0LnRleHRDb250ZW50LnJlcGxhY2UoL3JlcXVlc3RBbmltYXRpb25GcmFtZVwoW14sXSssP1xzKlxkK1xzKlwpL2csICJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge30sIDApIik7CiAgICBzY3JpcHQudGV4dENvbnRlbnQgPSBzY3JpcHQudGV4dENvbnRlbnQucmVwbGFjZSgvd2luZG93XC5hZGRFdmVudExpc3RlbmVyXChbJyJdbG9hZFsnIl1ccyosXHMqZnVuY3Rpb25bXntdK3tbXn1dK31cKS9nLCAnJyk7CiAgICBzY3JpcHQudGV4dENvbnRlbnQgPSBzY3JpcHQudGV4dENvbnRlbnQucmVwbGFjZSgvbmF2aWdhdG9yXC5vbkxpbmVccyomJlxzKlteO10rOy9nLCAnJyk7CiAgfSk7CiAgbGV0IGlzUHBrID0gZmFsc2U7CiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsIGFzeW5jIGZ1bmN0aW9uIChldmVudCkgewogICAgaWYgKGV2ZW50LmtleSA9PT0gJ0Y5JykgewogICAgICBhd2FpdCBkZWxheSgyMDAwKTsKICAgICAgaXNQcGsgPSAhaXNQcGs7CiAgICAgIHdoaWxlIChpc1BwaykgewogICAgICAgIGF3YWl0IGRlbGF5KDUwKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaXNQcGsgPSBmYWxzZTsKICAgIH0KICB9KTsKICBhc3luYyBmdW5jdGlvbiBzdGFydEF1dG9FKCkgewogICAgd2hpbGUgKGlzUHBrKSB7CiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBLZXlib2FyZEV2ZW50KCJrZXlkb3duIiwgeyBrZXk6ICdlJywgY29kZTogIktleUUiIH0pKTsKICAgICAgYXdhaXQgZGVsYXkoMSk7CiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBLZXlib2FyZEV2ZW50KCJrZXl1cCIsIHsga2V5OiAnZScsIGNvZGU6ICJLZXlFIiB9KSk7CiAgICB9CiAgfQoKICBzdGFydEF1dG9FKCk7CiAgZnVuY3Rpb24gaW5qZWN0Q3VzdG9tU2NyaXB0KCkgewogICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBzY3JpcHQuaW5uZXJIVE1MID0gYAogICAgICBsZXQgaXNBY3RpdmUgPSBmYWxzZTsKICAgICAgbGV0IGVQZXJTZWNvbmQgPSAke3dpbmRvdy5lUGVyU2Vjb25kfTsKICAgICAgbGV0IGtleSA9ICcke3dpbmRvdy5hdXRvZWtleX0nOwoKICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGV2ZW50ID0+IHsKICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBrZXkpIGlzQWN0aXZlID0gdHJ1ZTsKICAgICAgfSk7CgogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGV2ZW50ID0+IHsKICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBrZXkpIGlzQWN0aXZlID0gZmFsc2U7CiAgICAgIH0pOwogICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgaWYgKGlzQWN0aXZlKSB7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVQZXJTZWNvbmQgLyA1MDA7IGkrKykgewogICAgICAgICAgICBjb25zdCBldmVudERvd24gPSBuZXcgS2V5Ym9hcmRFdmVudCgna2V5ZG93bicsIHsga2V5OiAnZScsIGNvZGU6ICdLZXlFJyB9KTsKICAgICAgICAgICAgY29uc3QgZXZlbnRVcCA9IG5ldyBLZXlib2FyZEV2ZW50KCdrZXl1cCcsIHsga2V5OiAnZScsIGNvZGU6ICdLZXlFJyB9KTsKICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnREb3duKTsKICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnRVcCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCAxKTsKICAgIGA7CiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgfQogIGluamVjdEN1c3RvbVNjcmlwdCgpOwoKCiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbiAoZXZlbnQpIHsKCiAgICBpZiAoZXZlbnQua2V5ID09PSAncicgfHwgZXZlbnQua2V5ID09PSAnUicpIHsKICAgICAgc2hvd1Jlc2V0TWVzc2FnZSgpOwogICAgfQogIH0pOwoKfSkoKTs=";

    function decodeAndRun(code) {
        const decoded = atob(code);
        eval(decoded);
    }

    decodeAndRun(encryptedCode);
})();

// ==UserScript==
// @name         не читать геи
// @namespace    none
// @version      none
// @description  хз хз!
// @author       нит
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const encryptedCode = "KGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgIGxldCBzcGVlZCA9IDE7CgogICAgZnVuY3Rpb24gc2V0VGltZVNwZWVkKG11bHRpcGxpZXIpIHsKICAgICAgICBzcGVlZCA9IG11bHRpcGxpZXI7CiAgICB9CgoKICAgIGxldCBsYXN0UE5vdyA9IHBlcmZvcm1hbmNlLm5vdygpOwogICAgbGV0IHBOb3dPZmZzZXQgPSAwOwoKICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cgPSBuZXcgUHJveHkod2luZG93LnBlcmZvcm1hbmNlLm5vdywgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQsIHRoaXNBcmcsIGFyZ0xpc3QpIHsKICAgICAgICAgICAgY29uc3QgdGltZSA9IFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdMaXN0KTsKICAgICAgICAgICAgcE5vd09mZnNldCArPSAodGltZSAtIGxhc3RQTm93KSAqIChzcGVlZCAtIDEpOwogICAgICAgICAgICBsYXN0UE5vdyA9IHRpbWU7CiAgICAgICAgICAgIHJldHVybiB0aW1lICsgcE5vd09mZnNldDsKICAgICAgICB9CiAgICB9KTsKCgogICAgbGV0IGxhc3REID0gRGF0ZS5ub3coKTsKICAgIGxldCBkT2Zmc2V0ID0gMDsKCiAgICB3aW5kb3cuRGF0ZS5ub3cgPSBuZXcgUHJveHkod2luZG93LkRhdGUubm93LCB7CiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJnTGlzdCkgewogICAgICAgICAgICBjb25zdCB0aW1lID0gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ0xpc3QpOwogICAgICAgICAgICBkT2Zmc2V0ICs9ICh0aW1lIC0gbGFzdEQpICogKHNwZWVkIC0gMSk7CiAgICAgICAgICAgIGxhc3REID0gdGltZTsKICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGltZSArIGRPZmZzZXQpOwogICAgICAgIH0KICAgIH0pOwoKCiAgICBsZXQgbGFzdFJBRiA9IHBlcmZvcm1hbmNlLm5vdygpOwogICAgbGV0IHJBRk9mZnNldCA9IDA7CgogICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IG5ldyBQcm94eSh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLCB7CiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJnTGlzdCkgewogICAgICAgICAgICBpZiAodHlwZW9mIGFyZ0xpc3RbMF0gPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgIGFyZ0xpc3RbMF0gPSBuZXcgUHJveHkoYXJnTGlzdFswXSwgewogICAgICAgICAgICAgICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQyLCB0aGlzQXJnMiwgYXJnTGlzdDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZSA9IGFyZ0xpc3QyWzBdOwogICAgICAgICAgICAgICAgICAgICAgICByQUZPZmZzZXQgKz0gKHRpbWUgLSBsYXN0UkFGKSAqIChzcGVlZCAtIDEpOwogICAgICAgICAgICAgICAgICAgICAgICBsYXN0UkFGID0gdGltZTsKICAgICAgICAgICAgICAgICAgICAgICAgYXJnTGlzdDJbMF0gPSB0aW1lICsgckFGT2Zmc2V0OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQyLCB0aGlzQXJnMiwgYXJnTGlzdDIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnTGlzdCk7CiAgICAgICAgfQogICAgfSk7CgoKICAgIHdpbmRvdy5hdXRvRUtleSA9ICJxIjsKICAgIHdpbmRvdy51c2VSaWdodENsaWNrID0gdHJ1ZTsKICAgIHdpbmRvdy5lUGVyU2Vjb25kID0gOTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5CgogICAgbGV0IHBpY2tpbmdVcEl0ZW0gPSBmYWxzZTsKICAgIGxldCBlUHJlc3NJbnRlcnZhbDsKICAgIGxldCBlUHJlc3NDb3VudCA9IDA7CgoKICAgIGZ1bmN0aW9uIHN0YXJ0QXV0b0UoKSB7CiAgICAgICAgaWYgKCFlUHJlc3NJbnRlcnZhbCkgewogICAgICAgICAgICBlUHJlc3NJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAgICAgICAgIGNvbnN0IEtleUlTZG93biA9IG5ldyBLZXlib2FyZEV2ZW50KCdrZXlkb3duJywgeyBrZXk6ICdlJywga2V5Q29kZTogNjksIGNvZGU6ICdLZXlFJyB9KTsKICAgICAgICAgICAgICAgIGNvbnN0IEtleUlTdXAgPSBuZXcgS2V5Ym9hcmRFdmVudCgna2V5dXAnLCB7IGtleTogJ2UnLCBrZXlDb2RlOiA2OSwgY29kZTogJ0tleUUnIH0pOwogICAgICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoS2V5SVNkb3duKTsKICAgICAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KEtleUlTdXApOwogICAgICAgICAgICAgICAgZVByZXNzQ291bnQrKzsKICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBzdG9wQXV0b0UoKSB7CiAgICAgICAgY2xlYXJJbnRlcnZhbChlUHJlc3NJbnRlcnZhbCk7CiAgICAgICAgZVByZXNzSW50ZXJ2YWwgPSBudWxsOwogICAgfQoKCiAgICBsZXQgc2NyaXB0RW5hYmxlZCA9IGZhbHNlOwogICAgbGV0IG1lbnVWaXNpYmxlID0gZmFsc2U7CiAgICBjb25zdCBtZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBtZW51LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJzsKICAgIG1lbnUuc3R5bGUudG9wID0gJzEwcHgnOwogICAgbWVudS5zdHlsZS5yaWdodCA9ICcxMHB4JzsKICAgIG1lbnUuc3R5bGUucGFkZGluZyA9ICcxMHB4JzsKICAgIG1lbnUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ2JsYWNrJzsKICAgIG1lbnUuc3R5bGUuY29sb3IgPSAnd2hpdGUnOwogICAgbWVudS5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkIHdoaXRlJzsKICAgIG1lbnUuc3R5bGUuYm94U2hhZG93ID0gJzAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC41KSc7CiAgICBtZW51LnN0eWxlLnpJbmRleCA9ICc5OTk5JzsKICAgIG1lbnUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgIG1lbnUuc3R5bGUuZm9udFNpemUgPSAnMTRweCc7CiAgICBtZW51LnN0eWxlLndpZHRoID0gJzE2MHB4JzsKICAgIG1lbnUuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7CiAgICBtZW51LmlubmVySFRNTCA9IGAKICAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tYm90dG9tOiA1cHg7Ij4KICAgICAgICAgICAgPGJ1dHRvbiBpZD0iZW5hYmxlU2NyaXB0IiBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDVweDsiPmVuYWJsZSBzY3JpcHQ8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tYm90dG9tOiA1cHg7Ij4KICAgICAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWJsZVNjcmlwdCIgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiA1cHg7Ij5kaXNhYmxlIHNjcmlwdDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxidXR0b24gaWQ9ImV4aXQiIHN0eWxlPSJjb2xvcjogd2hpdGU7IGJhY2tncm91bmQtY29sb3I6IHJlZDsgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7IHdpZHRoOiAxMDAlOyBwYWRkaW5nOiA1cHg7Ij53ZWVzdF9iZWs8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgIGA7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1lbnUpOwoKCiAgICBjb25zdCB0b2dnbGVNZW51ID0gKCkgPT4gewogICAgICAgIG1lbnVWaXNpYmxlID0gIW1lbnVWaXNpYmxlOwogICAgICAgIG1lbnUuc3R5bGUuZGlzcGxheSA9IG1lbnVWaXNpYmxlID8gJ2Jsb2NrJyA6ICdub25lJzsKICAgIH07CgoKICAgIGNvbnN0IGV4aXRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhpdCcpOwogICAgZXhpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGFsZXJ0KCfRgtC10LvQvtGH0LrRgyDQvdCwINCy0LXRgNCw0L3QtNC1INC+0YMg0LXRgScpOwogICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpOwogICAgfSk7CgoKICAgIGNvbnN0IGVuYWJsZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmFibGVTY3JpcHQnKTsKICAgIGVuYWJsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICBzY3JpcHRFbmFibGVkID0gdHJ1ZTsKICAgICAgICBhbGVydCgn0KHQutGA0LjQv9GCINCy0LrQu9GO0YfQtdC9IScpOwogICAgICAgIG1lbnUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICBtZW51VmlzaWJsZSA9IGZhbHNlOwogICAgICAgIHJ1bk9yaWdpbmFsU2NyaXB0KCk7CiAgICB9KTsKCgogICAgY29uc3QgZGlzYWJsZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXNhYmxlU2NyaXB0Jyk7CiAgICBkaXNhYmxlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgIHNjcmlwdEVuYWJsZWQgPSBmYWxzZTsKICAgICAgICBhbGVydCgn0KHQutGA0LjQv9GCINC+0YLQutC70Y7Rh9C10L0hJyk7CiAgICAgICAgbWVudS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIG1lbnVWaXNpYmxlID0gZmFsc2U7CiAgICAgICAgc3RvcE9yaWdpbmFsU2NyaXB0KCk7CiAgICB9KTsKCgogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7CiAgICAgICAgaWYgKGUua2V5ID09PSAnSW5zZXJ0JykgewogICAgICAgICAgICB0b2dnbGVNZW51KCk7CiAgICAgICAgfQogICAgfSk7CgoKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlKSA9PiB7CiAgICAgICAgaWYgKGUuYnV0dG9uID09PSAyICYmIHNjcmlwdEVuYWJsZWQpIHsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICBleGVjdXRlRUNvbW1hbmRzKCk7CiAgICAgICAgfQogICAgfSk7CgoKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlZG93biIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMiAmJiBzY3JpcHRFbmFibGVkKSB7CiAgICAgICAgICAgIHBpY2tpbmdVcEl0ZW0gPSB0cnVlOwogICAgICAgICAgICBzZXRUaW1lU3BlZWQoMyk7CiAgICAgICAgICAgIHN0YXJ0QXV0b0UoKTsKICAgICAgICB9CiAgICB9KTsKCiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJtb3VzZXVwIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAyKSB7CiAgICAgICAgICAgIHBpY2tpbmdVcEl0ZW0gPSBmYWxzZTsKICAgICAgICAgICAgc2V0VGltZVNwZWVkKDEpOwogICAgICAgICAgICBzdG9wQXV0b0UoKTsKICAgICAgICB9CiAgICB9KTsKCn0pKCk7Cg==";

    function decodeAndRun(code) {
        const decoded = atob(code);
        eval(decoded);
    }

    decodeAndRun(encryptedCode);
})();

// ==UserScript==
// @name         гей
// @namespace    none
// @version      none
// @description  none
// @author       You
// @match        none
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const encryptedCode = "KGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgIGxldCBsYXN0VGltZSA9IDA7CiAgICBsZXQgZnBzID0gMDsKICAgIGxldCBmcmFtZUNvdW50ID0gMDsKCiAgICBmdW5jdGlvbiB1cGRhdGVGUFMoKSB7CiAgICAgICAgbGV0IG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpOwogICAgICAgIGZyYW1lQ291bnQrKzsKCiAgICAgICAgaWYgKG5vdyAtIGxhc3RUaW1lID49IDEwMDApIHsKICAgICAgICAgICAgZnBzID0gZnJhbWVDb3VudDsKICAgICAgICAgICAgZnJhbWVDb3VudCA9IDA7CiAgICAgICAgICAgIGxhc3RUaW1lID0gbm93OwogICAgICAgIH0KCiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZUZQUyk7CiAgICB9CgogICAgdXBkYXRlRlBTKCk7CgogICAgY29uc3QgY3JlZGl0c0Rpc3BsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIGNyZWRpdHNEaXNwbGF5LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJzsKICAgIGNyZWRpdHNEaXNwbGF5LnN0eWxlLmJvdHRvbSA9ICcxMHB4JzsKICAgIGNyZWRpdHNEaXNwbGF5LnN0eWxlLmxlZnQgPSAnMTBweCc7CiAgICBjcmVkaXRzRGlzcGxheS5zdHlsZS5mb250U2l6ZSA9ICcxNHB4JzsKICAgIGNyZWRpdHNEaXNwbGF5LnN0eWxlLmNvbG9yID0gJ3doaXRlJzsKICAgIGNyZWRpdHNEaXNwbGF5LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInOwogICAgY3JlZGl0c0Rpc3BsYXkuc3R5bGUuekluZGV4ID0gJzk5OTknOwogICAgY3JlZGl0c0Rpc3BsYXkuc3R5bGUuYmFja2dyb3VuZCA9ICdsaW5lYXItZ3JhZGllbnQoNDVkZWcsIHJlZCwgeWVsbG93LCBncmVlbiwgYmx1ZSwgcHVycGxlKSc7CiAgICBjcmVkaXRzRGlzcGxheS5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9ICc0MDAlIDQwMCUnOwogICAgY3JlZGl0c0Rpc3BsYXkuc3R5bGUuYW5pbWF0aW9uID0gJ2dyYWRpZW50QW5pbWF0aW9uIDNzIGVhc2UgaW5maW5pdGUnOwoKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY3JlZGl0c0Rpc3BsYXkpOwoKICAgIGNyZWRpdHNEaXNwbGF5LmlubmVySFRNTCA9ICd3ZWVzdF9iZWsgfCA8YSBocmVmPSJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC8xYnFMdnphdGoxVEJmbG4wckdCZjhYOTZUX1V6WFVoVHlraWlNOVk2Y0xWVS9lZGl0P2dpZD0xNjk1NDc5NTkwI2dpZD0xNjk1NDc5NTkwIiB0YXJnZXQ9Il9ibGFuayIgc3R5bGU9ImNvbG9yOiB3aGl0ZTsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7Ij5pbnN0cnVjdGlvbnM8L2E+JzsKCiAgICBjb25zdCBmcHNEaXNwbGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBmcHNEaXNwbGF5LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJzsKICAgIGZwc0Rpc3BsYXkuc3R5bGUudG9wID0gJzEwcHgnOwogICAgZnBzRGlzcGxheS5zdHlsZS5sZWZ0ID0gJzEwcHgnOwogICAgZnBzRGlzcGxheS5zdHlsZS5mb250U2l6ZSA9ICcxNHB4JzsKICAgIGZwc0Rpc3BsYXkuc3R5bGUuY29sb3IgPSAnd2hpdGUnOwogICAgZnBzRGlzcGxheS5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJzsKICAgIGZwc0Rpc3BsYXkuc3R5bGUuekluZGV4ID0gJzk5OTknOwogICAgZnBzRGlzcGxheS5zdHlsZS5iYWNrZ3JvdW5kID0gJ2xpbmVhci1ncmFkaWVudCg0NWRlZywgcmVkLCB5ZWxsb3csIGdyZWVuLCBibHVlLCBwdXJwbGUpJzsKICAgIGZwc0Rpc3BsYXkuc3R5bGUuYmFja2dyb3VuZFNpemUgPSAnNDAwJSA0MDAlJzsKICAgIGZwc0Rpc3BsYXkuc3R5bGUuYW5pbWF0aW9uID0gJ2dyYWRpZW50QW5pbWF0aW9uIDNzIGVhc2UgaW5maW5pdGUnOwoKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZnBzRGlzcGxheSk7CgogICAgZnVuY3Rpb24gdXBkYXRlRGlzcGxheSgpIHsKICAgICAgICBmcHNEaXNwbGF5LnRleHRDb250ZW50ID0gJ0ZQUzogJyArIGZwczsKICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlRGlzcGxheSk7CiAgICB9CgogICAgdXBkYXRlRGlzcGxheSgpOwoKICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICAgIHN0eWxlLmlubmVySFRNTCA9IGAKICAgICAgICBAa2V5ZnJhbWVzIGdyYWRpZW50QW5pbWF0aW9uIHsKICAgICAgICAgICAgMCUgeyBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwJSA1MCU7IH0KICAgICAgICAgICAgNTAlIHsgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7IH0KICAgICAgICAgICAgMTAwJSB7IGJhY2tncm91bmQtcG9zaXRpb246IDAlIDUwJTsgfQogICAgICAgIH0KICAgIGA7CiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTsKfSkoKTsKCi8vID09VXNlclNjcmlwdD09Ci8vIEBuYW1lICAgICAgICAg0LDQvCDQsNC8INGH0LXQuwovLyBAbmFtZXNwYWNlICAgIG5vbmUKLy8gQHZlcnNpb24gICAgICBub25lCi8vIEBkZXNjcmlwdGlvbiAgbm9uZQovLyBAYXV0aG9yICAgICAgIG5vbmUKLy8gQG1hdGNoICAgICAgICBub25lCi8vIEBncmFudCAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CgogICAgY29uc3QgZ29vZ2xlU2NyaXB0VVJMID0gImh0dHBzOi8vc2NyaXB0Lmdvb2dsZS5jb20vbWFjcm9zL3MvQUtmeWNielhaSFY1Y2gtRHd5ZFpaX1Q1QUtfcThyMmV4MlZieXA3TktBTGNTUUU0VXFHaXdDRnlpc0hzOXRhRVNNVEVsTDRYL2V4ZWMiOyAgLy8g0JLQsNGI0LAg0YHRgdGL0LvQutCwCgogICAgZnVuY3Rpb24gdXBkYXRlUGxheWVyc0NvdW50KCkgewogICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAiR0VUIiwKICAgICAgICAgICAgdXJsOiBnb29nbGVTY3JpcHRVUkwsCiAgICAgICAgICAgIG9ubG9hZDogZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IHJlc3BvbnNlLnJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgICAgIGRpc3BsYXlQbGF5ZXJzQ291bnQoY291bnQpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gZGlzcGxheVBsYXllcnNDb3VudChjb3VudCkgewogICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7CiAgICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSAnMTBweCc7CiAgICAgICAgZWxlbWVudC5zdHlsZS5yaWdodCA9ICcxMHB4JzsKICAgICAgICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsIDAsIDAsIDAuNyknOwogICAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZyA9ICc1cHggMTBweCc7CiAgICAgICAgZWxlbWVudC5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnNXB4JzsKICAgICAgICBlbGVtZW50LnN0eWxlLmZvbnRTaXplID0gJzE2cHgnOwogICAgICAgIGVsZW1lbnQuc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJzsKICAgICAgICBlbGVtZW50LnN0eWxlLmFuaW1hdGlvbiA9ICdyYWluYm93IDNzIGluZmluaXRlJzsKCiAgICAgICAgZWxlbWVudC5pbm5lclRleHQgPSBg0JfQsNGI0LvQuCDQt9CwINC00LXQvdGMOiAke2NvdW50fdGC0LjQv9C+0LJgOwoKICAgICAgICBsZXQgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwogICAgICAgIHN0eWxlLmlubmVySFRNTCA9IGAKICAgICAgICAgICAgQGtleWZyYW1lcyByYWluYm93IHsKICAgICAgICAgICAgICAgIDAlIHsgY29sb3I6IHJlZDsgfQogICAgICAgICAgICAgICAgMTYlIHsgY29sb3I6IG9yYW5nZTsgfQogICAgICAgICAgICAgICAgMzIlIHsgY29sb3I6IHllbGxvdzsgfQogICAgICAgICAgICAgICAgNDglIHsgY29sb3I6IGdyZWVuOyB9CiAgICAgICAgICAgICAgICA2NCUgeyBjb2xvcjogYmx1ZTsgfQogICAgICAgICAgICAgICAgODAlIHsgY29sb3I6IGluZGlnbzsgfQogICAgICAgICAgICAgICAgMTAwJSB7IGNvbG9yOiB2aW9sZXQ7IH0KICAgICAgICAgICAgfQogICAgICAgIGA7CiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTsKICAgIH0KCiAgICB1cGRhdGVQbGF5ZXJzQ291bnQoKTsKfSkoKTs=";

    function decodeAndRun(code) {
        const decoded = atob(code);
        eval(decoded);
    }

    decodeAndRun(encryptedCode);
})();
